// Generated by gencpp from file tracking_module/DetectedObject.msg
// DO NOT EDIT!


#ifndef TRACKING_MODULE_MESSAGE_DETECTEDOBJECT_H
#define TRACKING_MODULE_MESSAGE_DETECTEDOBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tracking_module
{
template <class ContainerAllocator>
struct DetectedObject_
{
  typedef DetectedObject_<ContainerAllocator> Type;

  DetectedObject_()
    : sample_token()
    , translation()
    , size()
    , rotation()
    , velocity()
    , detection_name()
    , detection_score(0.0)
    , attribute_name()  {
    }
  DetectedObject_(const ContainerAllocator& _alloc)
    : sample_token(_alloc)
    , translation(_alloc)
    , size(_alloc)
    , rotation(_alloc)
    , velocity(_alloc)
    , detection_name(_alloc)
    , detection_score(0.0)
    , attribute_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sample_token_type;
  _sample_token_type sample_token;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _translation_type;
  _translation_type translation;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _size_type;
  _size_type size;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _rotation_type;
  _rotation_type rotation;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _velocity_type;
  _velocity_type velocity;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _detection_name_type;
  _detection_name_type detection_name;

   typedef double _detection_score_type;
  _detection_score_type detection_score;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _attribute_name_type;
  _attribute_name_type attribute_name;





  typedef boost::shared_ptr< ::tracking_module::DetectedObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tracking_module::DetectedObject_<ContainerAllocator> const> ConstPtr;

}; // struct DetectedObject_

typedef ::tracking_module::DetectedObject_<std::allocator<void> > DetectedObject;

typedef boost::shared_ptr< ::tracking_module::DetectedObject > DetectedObjectPtr;
typedef boost::shared_ptr< ::tracking_module::DetectedObject const> DetectedObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tracking_module::DetectedObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tracking_module::DetectedObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tracking_module::DetectedObject_<ContainerAllocator1> & lhs, const ::tracking_module::DetectedObject_<ContainerAllocator2> & rhs)
{
  return lhs.sample_token == rhs.sample_token &&
    lhs.translation == rhs.translation &&
    lhs.size == rhs.size &&
    lhs.rotation == rhs.rotation &&
    lhs.velocity == rhs.velocity &&
    lhs.detection_name == rhs.detection_name &&
    lhs.detection_score == rhs.detection_score &&
    lhs.attribute_name == rhs.attribute_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tracking_module::DetectedObject_<ContainerAllocator1> & lhs, const ::tracking_module::DetectedObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tracking_module

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tracking_module::DetectedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tracking_module::DetectedObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tracking_module::DetectedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tracking_module::DetectedObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tracking_module::DetectedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tracking_module::DetectedObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tracking_module::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ca01a6aa65060b095be04c7e327b426";
  }

  static const char* value(const ::tracking_module::DetectedObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ca01a6aa65060b0ULL;
  static const uint64_t static_value2 = 0x95be04c7e327b426ULL;
};

template<class ContainerAllocator>
struct DataType< ::tracking_module::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tracking_module/DetectedObject";
  }

  static const char* value(const ::tracking_module::DetectedObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tracking_module::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string sample_token\n"
"float64[] translation\n"
"float64[] size\n"
"float64[] rotation\n"
"float64[] velocity\n"
"string detection_name\n"
"float64 detection_score\n"
"string attribute_name\n"
;
  }

  static const char* value(const ::tracking_module::DetectedObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tracking_module::DetectedObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sample_token);
      stream.next(m.translation);
      stream.next(m.size);
      stream.next(m.rotation);
      stream.next(m.velocity);
      stream.next(m.detection_name);
      stream.next(m.detection_score);
      stream.next(m.attribute_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectedObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tracking_module::DetectedObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tracking_module::DetectedObject_<ContainerAllocator>& v)
  {
    s << indent << "sample_token: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sample_token);
    s << indent << "translation[]" << std::endl;
    for (size_t i = 0; i < v.translation.size(); ++i)
    {
      s << indent << "  translation[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.translation[i]);
    }
    s << indent << "size[]" << std::endl;
    for (size_t i = 0; i < v.size.size(); ++i)
    {
      s << indent << "  size[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.size[i]);
    }
    s << indent << "rotation[]" << std::endl;
    for (size_t i = 0; i < v.rotation.size(); ++i)
    {
      s << indent << "  rotation[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rotation[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "detection_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.detection_name);
    s << indent << "detection_score: ";
    Printer<double>::stream(s, indent + "  ", v.detection_score);
    s << indent << "attribute_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.attribute_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRACKING_MODULE_MESSAGE_DETECTEDOBJECT_H
